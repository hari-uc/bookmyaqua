{"version":3,"file":"ngx-paypal.js","sources":["ngx-paypal/lib/services/script.service.ts","ngx-paypal/lib/services/paypal-script.service.ts","ngx-paypal/lib/components/paypal.component.ts","ngx-paypal/lib/ngx-paypal.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\r\n        const existingGlobalVar = (window as any)[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady(existingGlobalVar);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady((window as any)[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(globalVar: string): void {\r\n        // remove script from DOM\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n\r\n    private getElemId(globalVar: string): string {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IPayPalUrlConfig, IQueryParam } from '../models/paypal-models';\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class PayPalScriptService {\r\n\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n\r\n    constructor(\r\n        protected scriptService: ScriptService,\r\n    ) {\r\n    }\r\n\r\n    registerPayPalScript(config: IPayPalUrlConfig, onReady: (payPalApi: any) => void): void {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n\r\n    destroyPayPalScript(): void {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n\r\n    private getUrlForConfig(config: IPayPalUrlConfig): string {\r\n        const params: IQueryParam[] = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n\r\n    private getQueryString(queryParams: IQueryParam[]): string {\r\n        let queryString = '';\r\n\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            } else {\r\n                queryString += '&';\r\n            }\r\n\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n\r\n        return queryString;\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n    ICancelCallbackData,\r\n    IClientAuthorizeCallbackData,\r\n    ICreateOrderCallbackActions,\r\n    IInitCallbackData,\r\n    IOnApproveCallbackActions,\r\n    IOnApproveCallbackData,\r\n    IOnClickCallbackActions,\r\n    IOnInitCallbackActions,\r\n    IOnShippingChangeActions,\r\n    IOnShippingChangeData,\r\n    IPayPalConfig,\r\n} from '../models/paypal-models';\r\nimport { PayPalScriptService } from '../services/paypal-script.service';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config?: IPayPalConfig;\r\n\r\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\r\n    @Input() registerScript: boolean = true;\r\n\r\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\r\n    @Output() scriptLoaded = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    private payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainer', { static: false }) set payPalButtonContainer(content: ElementRef) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n\r\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\r\n    private initializePayPal: boolean = true;\r\n\r\n    /**\r\n     * Reference to PayPal global API\r\n     */\r\n    private payPal: any;\r\n\r\n    constructor(\r\n        private paypalScriptService: PayPalScriptService,\r\n        private cdr: ChangeDetectorRef,\r\n        private ngZone: NgZone\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n\r\n        // first time config setup\r\n        const config = this.config;\r\n\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n        }\r\n\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    customInit(payPal: any): void {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    reinitialize(config: IPayPalConfig | undefined): void {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n\r\n        if (this.payPalButtonContainerElem) {\r\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n            }\r\n        }\r\n\r\n        this.cdr.detectChanges();\r\n\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (payPal) => {\r\n\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            } else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private doPayPalCheck(): void {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n\r\n    private initPayPalScript(config: IPayPalConfig, initPayPal: (paypal: any) => void): void {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n\r\n    private generateElementId(): string {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n\r\n    private initPayPal(config: IPayPalConfig, paypal: any): void {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            paypal.Buttons({\r\n                style: config.style,\r\n                createOrder: (data: any, actions: ICreateOrderCallbackActions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                            throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                        Please choose one or the other.`);\r\n                        }\r\n\r\n                        if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                            throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                        Please define one of these to create order.`);\r\n                        }\r\n\r\n                        if (config.createOrderOnClient) {\r\n                            return actions.order.create(config.createOrderOnClient(data));\r\n                        }\r\n\r\n                        if (config.createOrderOnServer) {\r\n                            return config.createOrderOnServer(data);\r\n                        }\r\n\r\n                        throw Error(`Invalid state for 'createOrder'.`);\r\n                    });\r\n                },\r\n\r\n                onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n\r\n                        // capture on client\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\r\n                                onClientAuthorization(details);\r\n                            });\r\n                            return;\r\n                        }\r\n                    });\r\n                },\r\n\r\n                onError: (error: any) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    });\r\n                },\r\n\r\n                onCancel: (data: ICancelCallbackData, actions: any) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onShippingChange: (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onShippingChange) {\r\n                            return config.onShippingChange(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onClick: (data: any, actions: IOnClickCallbackActions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onInit: (data: IInitCallbackData, actions: IOnInitCallbackActions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    });\r\n                }\r\n            }).render(`#${this.payPalButtonContainerId}`);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal.component';\r\nimport { ScriptService } from './services/script.service';\r\nimport { PayPalScriptService } from './services/paypal-script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    PayPalScriptService\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n"]}